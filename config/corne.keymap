/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LA 0
#define LNAV 1
#define LS 2
#define LM 3
#define LNUM 4

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret1 {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ENTER>;
        };
	combo_ret2 {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp ENTER>;
        };
	combo_del {
            timeout-ms = <50>;
            key-positions = <36 37>;
   	    bindings = <&kp DEL>;
        };
	combo_copy {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp LG(C)>;
        };
	combo_paste {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LG(V)>;
        };
	combo_cut {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LG(X)>;
        };
	combo_up {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp UP>;
        };
	combo_down {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp DOWN>;
        };
	combo_left {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp LEFT>;
        };
	combo_right {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RIGHT>;
        };
	combo_word_up {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp LA(LEFT)>;
        };
	combo_word_down {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp LA(RIGHT)>;
        };
	combo_e_accent {
            timeout-ms = <50>;
            key-positions = <2 14>;
            bindings = <&accent_e>;
        };
	combo_a_accent {
            timeout-ms = <50>;
            key-positions = <0 12>;
            bindings = <&accent_a>;
        };
	combo_i_accent {
            timeout-ms = <50>;
            key-positions = <4 16>;
            bindings = <&accent_i>;
        };
	combo_n_accent {
            timeout-ms = <50>;
            key-positions = <8 20>;
            bindings = <&accent_n>;
        };
	combo_o_accent {
            timeout-ms = <50>;
            key-positions = <1 13>;
            bindings = <&accent_o>;
        };
	combo_u_accent {
            timeout-ms = <50>;
            key-positions = <3 15>;
            bindings = <&accent_u>;
        };
    };
    
    macros {
        accent_e: accent_e {
            label = "Accented E";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(E)>
                , <&macro_tap &kp E>
                ;
        };
	accent_a: accent_a {
            label = "Accented A";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(E)>
                , <&macro_tap &kp A>
                ;
        };
	accent_i: accent_i {
            label = "Accented I";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(E)>
                , <&macro_tap &kp I>
                ;
        };
	accent_n: accent_n {
            label = "Accented N";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(N)>
                , <&macro_tap &kp N>
                ;
        };
	accent_u: accent_u {
            label = "Accented U";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(E)>
                , <&macro_tap &kp U>
                ;
        };
	accent_o: accent_o {
            label = "Accented O";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
	    wait-ms = <40>;
	    tap-ms = <40>;
            bindings
                = <&macro_tap &kp LA(E)>
                , <&macro_tap &kp O>
                ;
        };
    };

        behaviors {
        sh: homerow_shifts {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_SHIFTS";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
                compatible = "zmk,keymap";

                alpha_layer {
                bindings = <
   &none		&kp G		&kp P    	&kp L         	&kp C		&none	         	&none    	&kp D		&kp H         	&kp N		&kp M		&none
   &none		&kp O    	&kp A    	&kp E	 	&kp I		&none   	 	&none		&kp T		&kp R		&kp U		&kp S		&none
   &none		&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				        &none	 	&kp LGUI 	&mo LNAV		&mo LS		&kp RSHIFT 	&none
                	>;
                };

                nav_layer {
                bindings = <
   &none		&kp DEL		&kp LG(X)    	&kp LG(V)      	&kp LG(C)	&none	         	&none    	&kp ESC		&kp UP         	&kp LG(Z)	&kp PG_UP	&none
   &none		&kp BSPC    	&kp LSHIFT    	&kp RALT 	&kp RGUI	&none   	 	&none		&kp LEFT	&kp DOWN	&kp RIGHT	&kp PG_DOWN	&none
   &none		&none	 	&none 		&none 		&none	 	&none   	 	&none	 	&none  		&none		&none		&none		&none
                  				        &none	 	&RCTRL	 	&trans			&kp TAB		&kp TILDE 	&none
                	>;
                };
                numpad_layer {
                bindings = <
   &kp EXCL 		&kp AT 		&kp HASH 	&kp DOLLAR 	&kp PERCENT 	&kp CARET		&trans		&kp KP_N7	&kp KP_N8	&kp KP_N9	&kp KP_PLUS	&kp KP_MINUS
   &kp AMPS		&kp STAR 	&kp LPAR 	&kp RPAR	&kp LBRC	&kp RBRC		&kp KP_DOT	&kp KP_N4	&kp KP_N5	&kp KP_N6	&kp KP_MULTIPLY	&kp KP_DIVIDE
   &kp LA(LS(N9))	&none  		&kp LBKT	&kp RBKT  	&none		&trans			&kp KP_N0   	&kp KP_N1	&kp KP_N2	&kp KP_N3	&kp KP_EQUAL	&trans
                                      			&none       	&kp BSPC    	&to ALPHA		&to NAV     	&kp SPACE	&trans
                        >;
                };
                nav_layer {
                bindings = <
   &none    	&none       	&none       	&none           &none           &none               	&none           &none       	&kp UP          &none       	&none           &kp HOME
   &none    	&kp LSHIFT     	&kp LGUI   	&kp LALT	&trans          &trans              	&none           &kp LEFT    	&kp DOWN        &kp RIGHT   	&none           &none
   &none    	&none       	&none       	&none           &none           &none               	&none           &none   	&none		&none 		&none           &kp END
                    	            		&none           &kp BSPC	&to ALPHA           	&to MEDIA       &kp SPACE   	&trans
                        >;
                };
                media_layer {
                bindings = <
   &kp C_PREV     &kp C_PP    &kp C_NEXT      &none     &none     &kp ESC         &none       &none       &none   &none   &none   &none
   &kp C_VOL_DN   &kp K_MUTE  &kp C_VOL_UP    &none     &none     &none           &trans      &none       &none   &none   &none   &none
   &none          &none       &none           &none     &none     &none           &none       &none       &none   &none   &none   &none
                    	                      &none     &kp BSPC  &to ALPHA       &to FUNC    &kp SPACE   &trans
                        >;
                };
                func_layer {
                bindings = <
   &none 	&none &none &none &none &trans     &none &kp F7 &kp F8 &kp F9 &kp F10 &kp F12
   &none 	&none &none &none &none &none      &none &kp F4 &kp F5 &kp F6 &kp F11 &kp F13
   &bt BT_NXT 	&none &none &none &none &none      &none &kp F1 &kp F2 &kp F3 &kp F14 &kp LG(LS(N4))
               	&none &kp DEL   &to ALPHA    &none    &kp SPACE   &trans
                        >;
                };
        };
};
