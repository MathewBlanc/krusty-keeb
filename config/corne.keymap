/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define ALPHA 0
#define NUMSYM 1
#define NAV 2
#define MEDIA 3
#define FUNC 4

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_ret1 {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ENTER>;
        };
	combo_ret2 {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp ENTER>;
        };
	combo_copy {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp LG(C)>;
        };
	combo_paste {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp LG(V)>;
        };	
	combo_cut {
            timeout-ms = <50>;
            key-positions = <4 5>;
            bindings = <&kp LG(X)>;
        };
	combo_up {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp UP>;
        };	
	combo_down {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp DOWN>;
        };	
	combo_left {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp LEFT>;
        };	
	combo_right {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RIGHT>;
        };
    };
    
    keymap {
                compatible = "zmk,keymap";

                alpha_layer {
                bindings = <
   &kp SQT	&kp COMMA	&kp PERIOD	&mt LSHIFT P	&mt LCTRL Y	&lt FUNC F 	 	&lt MEDIA G	&mt RCTRL  C	&mt RSHIFT R	&kp L		&kp SLASH	    &kp BACKSLASH
   &kp A    	&kp O       	&mt LALT E  	&mt LGUI U    	&kp I 		&lt NAV D   	 	&lt NUMSYM H	&kp T  		&mt RGUI  N	&mt RALT  S  	&kp MINUS	    &kp EQUAL
   &kp LSHIFT 	&kp SEMI 	&kp Q 		&kp J 		&kp K 		&lt NUMSYM X   	 	&kp B 		&kp M  		&kp W 		&kp V 		&kp Z 		    &kp ENTER
                  				&kp GRAVE 	&kp BSPC 	&kp TAB   		&to NUMSYM 	&kp SPACE 	&kp F20
                >;
                };
				
                numsym_layer {
                bindings = <
   &kp EXCL 	&kp AT 		&kp HASH 	&kp DOLLAR 	&kp PERCENT 	&kp CARET    		&trans   	&kp KP_N7   	&kp KP_N8 	&kp KP_N9	&kp KP_PLUS	&kp KP_MINUS 
   &kp AMPS 	&kp STAR 	&kp LPAR 	&kp RPAR 	&kp LBRC 	&kp RBRC        	&kp KP_DOT 	&kp KP_N4 	&kp KP_N5 	&kp KP_N6 	&kp KP_MULTIPLY &kp KP_DIVIDE
   &none  	&none  		&kp LBKT  	&kp RBKT  	&none 		&trans          	&kp KP_N0   	&kp KP_N1   	&kp KP_N2 	&kp KP_N3	&kp KP_EQUAL	&trans
                          	        	&none       	&kp BSPC    	&to ALPHA        	&to NAV     	&kp SPACE       &trans
                        >;
                };
                nav_layer {
                 bindings = <
   &none    	&none       	&none       	&none           &none           &none               	&none           &none       	&kp UP          &none       	&none           &kp HOME
   &none    	&none       	&none	    	&kp LALT	&kp LGUI        &trans              	&none           &kp LEFT    	&kp DOWN        &kp RIGHT   	&none           &none
   &none    	&none       	&none       	&none           &none           &none               	&none           &none   	&none      	&none 		&none           &kp END
                    	            		&none           &kp BSPC	&to ALPHA           	&to MEDIA       &kp SPACE   	&trans
                        >;
                };
                media_layer {
                bindings = <
   &kp K_PREV   &kp K_PP    &kp K_NEXT      &none   &none   &kp ESC         &none       &none       &none   &none   &none   &none
   &kp K_VOL_DN &kp K_MUTE  &kp K_VOL_UP    &none   &none   &none           &trans      &none       &none   &none   &none   &none
   &none        &none       &none           &none   &none   &none           &none       &none       &none   &none   &none   &none
                    	    &none           &kp BSPC   &to ALPHA            &to FUNC    &kp SPACE   &trans
                        >;
                };
                func_layer {
                bindings = <
   &none &none &none &none &none &trans     &none &kp F7 &kp F8 &kp F9 &kp F10 &kp F12
   &none &none &none &none &none &none      &none &kp F4 &kp F5 &kp F6 &kp F11 &kp F13
   &none &none &none &none &none &none      &none &kp F1 &kp F2 &kp F3 &kp F14 &kp LG(LS(N4))
               &none &kp DEL   &to ALPHA   &none    &kp SPACE   &trans
                        >;
                };
        };
};
